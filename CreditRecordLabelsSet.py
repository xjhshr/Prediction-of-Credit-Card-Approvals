# -*- coding: utf-8 -*-
"""CreditRecordLabelsSet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1joQRIgCxi7AtzGDuhlEQZblHKJ40dAcJ
"""

import pandas as pd

names =['ID','MONTHS_BALANCE','status']
df = pd.read_csv('drive/My Drive/credit_record.csv',header=0,sep=',',names=names)
print(df)

"""

Let's get how many different individual(sample) of this dataset"""

import numpy as np
MonthBalance=np.array(df['MONTHS_BALANCE'])
ID_vector=np.array(df[['ID']])
Status_Vector=np.array(df['status'])

zeroPosition=np.argwhere(MonthBalance==0) #Accoring to the explanation of dataset,
#the month of the extracted data is the starting point, backwards, 0 is the current month, -1 is the previous month, and so on 
print(len(zeroPosition))

"""Now, let us check each person has how many credit records"""

Length_Individual=len(zeroPosition)
RecordNum=np.zeros(Length_Individual);
for index in range(Length_Individual-1):
  RecordNum[index]=zeroPosition[index+1]-zeroPosition[index]


RecordNum[Length_Individual-1]=len(MonthBalance)-1-zeroPosition[Length_Individual-1]
RecordNumInt=RecordNum.astype(int)
print(RecordNumInt)
print(len(RecordNum))

"""Now, we could get the mean of individual credit card records"""

RecormSum=0
for index in range(Length_Individual):
  RecormSum +=RecordNum[index]

RecormMean=RecormSum/Length_Individual
print(RecormMean)

"""Now, We could decide to delete some individuals whose records are too less. Specificly, we could only retain the individuals whose credit cards records are more than 24 months."""

RecordLessThresh=np.argwhere(RecordNum<(RecormMean-7))
print(RecordLessThresh.shape)

RecordLargerThresh=np.argwhere(RecordNum>(RecormMean-7))
print(RecordLargerThresh.shape)
print(RecordLargerThresh.dtype)
deletePosition=[]

RecordLargerThreshNew=RecordLargerThresh.copy()
for index_outer in range(len(RecordLargerThresh)):
  if MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+1] !=-1:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+2] !=-2:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+3] !=-3:
    RecordLargerThreshNew=np.delete(RecordLargerThreshNew,RecordLargerThresh[index_outer])
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+4] !=-4:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+5] !=-5:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+6] !=-6:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+7] !=-7:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+8] !=-8:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+9] !=-9:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+10] !=-10:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+11] !=-11:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+12] !=-12:
   deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+13] !=-13:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+14] !=-14:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+15] !=-15:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+16] !=-16:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+17] !=-17:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+18] !=-18:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+19] !=-19:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+20] !=-20:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+21] !=-21:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+22] !=-22:
    deletePosition.append(index_outer)
  elif MonthBalance[zeroPosition[RecordLargerThresh[index_outer]]+23] !=-23:
    deletePosition.append(index_outer)

deletePosition=np.array(deletePosition)
print(deletePosition.shape)

RecordLargerThreshNew=np.delete(RecordLargerThreshNew,deletePosition)
print(RecordLargerThreshNew.shape)

"""Now, we could cutoff the records which are more than 24 months ago just in order to make the dimension of each person's records same. Then, we could use k-means to allocate k labels to each idividual. These labels could tell us whether one could get credit card or not."""

ID_vector_Need=np.ones(len(RecordLargerThreshNew))

Status_Vector_Need = np.empty((len(RecordLargerThreshNew),24), dtype=object)

print(zeroPosition[RecordLargerThreshNew[1]])
print(Status_Vector[zeroPosition[RecordLargerThreshNew[34]]])

for index in range(len(RecordLargerThreshNew)):
  ID_vector_Need[index]=ID_vector[zeroPosition[RecordLargerThreshNew[index]]]

  for index_inner in range(24):
    Status_Vector_Need[index,index_inner]=Status_Vector[zeroPosition[RecordLargerThreshNew[index]]+index_inner]

print(ID_vector_Need.shape)
print(Status_Vector_Need.shape)

"""According to the explanation of credit cards records, there are 8 dimensions: 0: 1-29 days past due 1: 30-59 days past due 2: 60-89 days overdue 3: 90-119 days overdue 4: 120-149 days overdue 5: Overdue or bad debts, write-offs for more than 150 days C: paid off that month X: No loan for the month Therefore, we could collect statistics about these 8 dimensions of each one's records


"""

StastData=np.zeros((len(RecordLargerThreshNew),3))

for index_outer in range(len(RecordLargerThreshNew)):
  for index_inner in range(24):
    if Status_Vector_Need[index_outer,index_inner]=='0':
      StastData[index_outer,1] = StastData[index_outer,1]+1;
    elif Status_Vector_Need[index_outer,index_inner]=='1':
      StastData[index_outer,1] = StastData[index_outer,1]+1.5;
    elif Status_Vector_Need[index_outer,index_inner]=='2':
      StastData[index_outer,1] = StastData[index_outer,1]+2;
    elif Status_Vector_Need[index_outer,index_inner]=='3':
      StastData[index_outer,2] = StastData[index_outer,2]+3;
    elif Status_Vector_Need[index_outer,index_inner]=='4':
      StastData[index_outer,2] = StastData[index_outer,2]+4;
    elif Status_Vector_Need[index_outer,index_inner]=='5':
      StastData[index_outer,2] = StastData[index_outer,2]+5;
    elif Status_Vector_Need[index_outer,index_inner]=='C':
      StastData[index_outer,0] = StastData[index_outer,0]+1;
    elif Status_Vector_Need[index_outer,index_inner]=='X':
      StastData[index_outer,0] = StastData[index_outer,0]+1;
    

print(StastData)

from sklearn.cluster import KMeans
kmeans = KMeans(3)
labels = kmeans.fit(StastData).predict(StastData)
print(labels)

output=np.empty((len(RecordLargerThreshNew),5))
for index_outer in range(len(RecordLargerThreshNew)):
  output[index_outer,0]=ID_vector_Need[index_outer]
  output[index_outer,4]=labels[index_outer]
  for index_inner in range(3):
    output[index_outer,index_inner+1]= StastData[index_outer,index_inner]

print(output.shape)
print(output)
np.savetxt('drive/My Drive/credit_record_new.csv', output, delimiter = ',')